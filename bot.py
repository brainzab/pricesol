import requests
import time
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADDRESS, NAME, PERCENT = range(3)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤: {chat_id: {token_address: {"last_price": float, "percent": float, "last_market_cap": float, "name": str}}}
tracked_tokens = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
temp_data = {}

def get_token_price(token_address):
    try:
        url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        response = requests.get(url, timeout=10)
        
        if response.status_code != 200:
            return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}
        
        data = response.json()
        
        if "pairs" in data and len(data["pairs"]) > 0:
            price_usd = float(data["pairs"][0]["priceUsd"])
            market_cap = float(data["pairs"][0]["fdv"])
            price_change_24h = float(data["pairs"][0]["priceChange"]["h24"])
            return {"price": price_usd, "market_cap": market_cap, "price_change_24h": price_change_24h}
        else:
            return {"error": "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Dexscreener"}
    
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞: {str(e)}"}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tracked_tokens:
        tracked_tokens[chat_id] = {}
    await update.message.reply_text(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ Solana.\n"
        "\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "<b>/add</b> <i>–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞</i> ‚Äî –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞\n"
        "<b>/remove</b> <i>–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞</i> ‚Äî —É–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω\n"
        "<b>/list</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤",
        parse_mode="HTML"
    )

async def add_token_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tracked_tokens:
        tracked_tokens[chat_id] = {}
    
    args = context.args
    if len(args) != 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/add</b> <i>–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞</i>\n"  # –£–±—Ä–∞–Ω <code>, –∫–æ–º–∞–Ω–¥—ã –∂–∏—Ä–Ω—ã–µ, –∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞ –∫—É—Ä—Å–∏–≤–æ–º
            "–ü—Ä–∏–º–µ—Ä: <b>/add</b> <i>7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU</i>",
            parse_mode="HTML"
        )
        return ConversationHandler.END
    
    token_address = args[0]
    result = get_token_price(token_address)
    
    if "error" in result:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω: <i>{result['error']}</i>", parse_mode="HTML")
        return ConversationHandler.END
    
    temp_data["address"] = token_address
    temp_data["price"] = result["price"]
    temp_data["market_cap"] = result["market_cap"]
    temp_data["chat_id"] = chat_id
    
    await update.message.reply_text(
        f"‚úÖ –¢–æ–∫–µ–Ω —Å –∞–¥—Ä–µ—Å–æ–º <code>{token_address}</code> –Ω–∞–π–¥–µ–Ω.\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${result['price']:.6f}</b>\n"
        f"–¢–µ–∫—É—â–∏–π Market Cap: <b>${result['market_cap']:,.2f}</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞</b>:",
        parse_mode="HTML"
    )
    return NAME

async def add_token_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    token_name = update.message.text.strip()
    temp_data["name"] = token_name
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ <b>{token_name}</b> –ø—Ä–∏–Ω—è—Ç–æ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã</b> (–æ—Ç 1 –¥–æ 1000):",
        parse_mode="HTML"
    )
    return PERCENT

async def add_token_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    percent_str = update.message.text.strip()
    try:
        percent = float(percent_str)
        if not (1 <= percent <= 1000):
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç <b>1</b> –¥–æ <b>1000</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                parse_mode="HTML"
            )
            return PERCENT
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>—á–∏—Å–ª–æ–º</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode="HTML"
        )
        return PERCENT
    
    token_address = temp_data["address"]
    chat_id = temp_data["chat_id"]
    tracked_tokens[chat_id][token_address] = {
        "last_price": temp_data["price"],
        "percent": percent,
        "last_market_cap": temp_data["market_cap"],
        "name": temp_data["name"]
    }
    
    await update.message.reply_text(
        f"‚úÖ –¢–æ–∫–µ–Ω <b>{temp_data['name']}</b> (<code>{token_address}</code>) –¥–æ–±–∞–≤–ª–µ–Ω.\n"
        f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ <b>{percent}%</b>",
        parse_mode="HTML"
    )
    temp_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ <b>–æ—Ç–º–µ–Ω–µ–Ω–æ</b>.", parse_mode="HTML")
    temp_data.clear()
    return ConversationHandler.END

async def remove_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tracked_tokens:
        tracked_tokens[chat_id] = {}
    
    args = context.args
    if len(args) != 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/remove</b> <i>–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞</i>",  # –£–±—Ä–∞–Ω <code>, –∫–æ–º–∞–Ω–¥–∞ –∂–∏—Ä–Ω–∞—è, –∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞ –∫—É—Ä—Å–∏–≤–æ–º
            parse_mode="HTML"
        )
        return
    
    token_address = args[0]
    if token_address in tracked_tokens[chat_id]:
        token_name = tracked_tokens[chat_id][token_address]["name"]
        del tracked_tokens[chat_id][token_address]
        await update.message.reply_text(
            f"‚úÖ –¢–æ–∫–µ–Ω <b>{token_name}</b> (<code>{token_address}</code>) —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
            parse_mode="HTML"
        )

async def list_tokens(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tracked_tokens:
        tracked_tokens[chat_id] = {}
    
    if not tracked_tokens[chat_id]:
        await update.message.reply_text(
            "üìã –í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ <b>–ø—É—Å—Ç</b>",
            parse_mode="HTML"
        )
        return
    
    response = "üìã <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã:</b>\n\n"
    for token, data in tracked_tokens[chat_id].items():
        result = get_token_price(token)
        if "error" in result:
            price_change_24h = "N/A"
            emoji_24h = ""
        else:
            price_change_24h = result["price_change_24h"]
            emoji_24h = "üü¢" if price_change_24h > 0 else "üî¥" if price_change_24h < 0 else ""
        
        dexscreener_url = f"https://dexscreener.com/solana/{token}"
        response += (f"<b>{data['name']}</b> (<code>{token}</code>)\n"
                     f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ: <b>{data['percent']}%</b>\n"
                     f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {emoji_24h} <b>{price_change_24h}%</b>\n"
                     f"<a href='{dexscreener_url}'><i>–ß–∞—Ä—Ç –Ω–∞ Dexscreener</i></a>\n\n")
    await update.message.reply_text(response, parse_mode="HTML", disable_web_page_preview=True)

async def check_prices(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in tracked_tokens:
        for token_address, data in list(tracked_tokens[chat_id].items()):
            result = get_token_price(token_address)
            if "error" in result:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è <b>{data['name']}</b> (<code>{token_address}</code>): <i>{result['error']}</i>",
                    parse_mode="HTML"
                )
                continue
            
            current_price = result["price"]
            current_market_cap = result["market_cap"]
            last_price = data["last_price"]
            percent_change = abs((current_price - last_price) / last_price * 100)
            
            if percent_change >= data["percent"]:
                direction = "–≤—ã—Ä–æ—Å–ª–∞" if current_price > last_price else "—É–ø–∞–ª–∞"
                emoji = "üü¢" if current_price > last_price else "üî¥"
                dexscreener_url = f"https://dexscreener.com/solana/{token_address}"
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"{emoji} –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ <b>{data['name']}</b> {direction} –Ω–∞ <b>{percent_change:.2f}%</b>!\n"
                         f"–¶–µ–Ω–∞: <b>${current_price:.6f}</b>\n"
                         f"Market Cap: <b>${current_market_cap:,.2f}</b>\n\n"
                         f"<a href='{dexscreener_url}'><i>–ß–∞—Ä—Ç –Ω–∞ Dexscreener</i></a>",
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                tracked_tokens[chat_id][token_address]["last_price"] = current_price
                tracked_tokens[chat_id][token_address]["last_market_cap"] = current_market_cap

def main():
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    application = Application.builder().token(bot_token).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", add_token_start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_token_name)],
            PERCENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_token_percent)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("remove", remove_token))
    application.add_handler(CommandHandler("list", list_tokens))
    
    application.job_queue.run_repeating(check_prices, interval=60, first=10)
    
    application.run_polling()

if __name__ == "__main__":
    main()
