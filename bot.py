import requests
import time
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
from telegram import BotCommand

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADDRESS, NAME, PERCENT, EDIT_ADDRESS, EDIT_PERCENT = range(5)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤: {chat_id: {token_address: {"last_price": float, "percent": float, "last_market_cap": float, "name": str}}}
tracked_tokens = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
temp_data = {}

# –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
cache = {}
CACHE_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
MAX_TOKENS_PER_USER = 50

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–±–æ—è—Ö (–∑–∞–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_CHAT_ID)
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –î–æ–±–∞–≤—å—Ç–µ –≤ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

def format_number(value, is_price=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –≤ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π –≤–∏–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è Market Cap."""
    if not is_price and isinstance(value, float) and value >= 1000000:  # –ù–µ —Å–æ–∫—Ä–∞—â–∞–µ–º —Ü–µ–Ω—É
        return f"${value / 1000000:.2f}M"
    return f"${value:,.2f}"

def get_token_price(token_address):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    current_time = time.time()
    if token_address in cache and (current_time - cache[token_address]["timestamp"]) < CACHE_TIMEOUT:
        return cache[token_address]["data"]
    
    session = requests.Session()
    retry_strategy = Retry(
        total=3,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        backoff_factor=1,  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (1 —Å–µ–∫, 2 —Å–µ–∫, 4 —Å–µ–∫)
        status_forcelist=[429, 500, 502, 503, 504],  # –ö–æ–¥—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    )
    adapter = HTTPAdapter(max_retries=retry_strategy)
    session.mount("https://", adapter)
    
    try:
        url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        response = session.get(url, timeout=15)
        
        if response.status_code != 200:
            return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}
        
        data = response.json()
        
        if "pairs" in data and len(data["pairs"]) > 0:
            pair = data["pairs"][0]
            price_usd = float(pair["priceUsd"])
            market_cap = float(pair["fdv"])
            price_change_24h = pair.get("priceChange", {}).get("h24", "N/A")
            if price_change_24h != "N/A":
                price_change_24h = float(price_change_24h)
            result = {"price": price_usd, "market_cap": market_cap, "price_change_24h": price_change_24h}
            cache[token_address] = {"data": result, "timestamp": current_time}
            return result
        else:
            return {"error": "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Dexscreener"}
    
    except requests.exceptions.ReadTimeout:
        return {"error": "–¢–∞–π–º-–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Dexscreener"}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞: {str(e)}"}

async def async_get_token_price(token_address):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è get_token_price."""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, get_token_price, token_address)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tracked_tokens:
        tracked_tokens[chat_id] = {}
    await update.message.reply_text(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ Solana.\n"
        "\n"
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–µ–Ω—é (—Ç—Ä–∏ —Ç–æ—á–∫–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É).",
        parse_mode="HTML"
    )

async def add_token_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tracked_tokens:
        tracked_tokens[chat_id] = {}
    
    if len(tracked_tokens[chat_id]) >= MAX_TOKENS_PER_USER:
        await update.message.reply_text(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ <b>{MAX_TOKENS_PER_USER}</b> —Ç–æ–∫–µ–Ω–æ–≤. –£–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.",
            parse_mode="HTML"
        )
        return ConversationHandler.END
    
    args = context.args
    if len(args) != 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/add</b> <i>–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞</i>\n"
            "–ü—Ä–∏–º–µ—Ä: <b>/add</b> <i>7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU</i>",
            parse_mode="HTML"
        )
        return ConversationHandler.END
    
    token_address = args[0]
    result = get_token_price(token_address)
    
    if "error" in result:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω: <i>{result['error']}</i>", parse_mode="HTML")
        if ADMIN_CHAT_ID and "–¢–∞–π–º-–∞—É—Ç" in result["error"]:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞ <code>{token_address}</code>",
                parse_mode="HTML"
            )
        return ConversationHandler.END
    
    temp_data["address"] = token_address
    temp_data["price"] = result["price"]
    temp_data["market_cap"] = result["market_cap"]
    temp_data["chat_id"] = chat_id
    
    await update.message.reply_text(
        f"‚úÖ –¢–æ–∫–µ–Ω —Å –∞–¥—Ä–µ—Å–æ–º <code>{token_address}</code> –Ω–∞–π–¥–µ–Ω.\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{format_number(result['price'], is_price=True)}</b>\n"
        f"–¢–µ–∫—É—â–∏–π Market Cap: <b>{format_number(result['market_cap'])}</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞</b>:",
        parse_mode="HTML"
    )
    return NAME

async def add_token_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    token_name = update.message.text.strip()
    temp_data["name"] = token_name
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ <b>{token_name}</b> –ø—Ä–∏–Ω—è—Ç–æ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã</b> (–æ—Ç 1 –¥–æ 1000):",
        parse_mode="HTML"
    )
    return PERCENT

async def add_token_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    percent_str = update.message.text.strip()
    try:
        percent = float(percent_str)
        if not (1 <= percent <= 1000):
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç <b>1</b> –¥–æ <b>1000</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                parse_mode="HTML"
            )
            return PERCENT
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>—á–∏—Å–ª–æ–º</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode="HTML"
        )
        return PERCENT
    
    token_address = temp_data["address"]
    chat_id = temp_data["chat_id"]
    tracked_tokens[chat_id][token_address] = {
        "last_price": temp_data["price"],
        "percent": percent,
        "last_market_cap": temp_data["market_cap"],
        "name": temp_data["name"]
    }
    
    await update.message.reply_text(
        f"‚úÖ –¢–æ–∫–µ–Ω <b>{temp_data['name']}</b> (<code>{token_address}</code>) –¥–æ–±–∞–≤–ª–µ–Ω.\n"
        f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ <b>{percent}%</b>",
        parse_mode="HTML"
    )
    temp_data.clear()
    return ConversationHandler.END

async def edit_token_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tracked_tokens:
        tracked_tokens[chat_id] = {}
    
    args = context.args
    if len(args) != 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/edit</b> <i>–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞</i>\n"
            "–ü—Ä–∏–º–µ—Ä: <b>/edit</b> <i>7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU</i>",
            parse_mode="HTML"
        )
        return ConversationHandler.END
    
    token_address = args[0]
    if token_address not in tracked_tokens[chat_id]:
        await update.message.reply_text(
            f"‚ùå –¢–æ–∫–µ–Ω —Å –∞–¥—Ä–µ—Å–æ–º <code>{token_address}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
            parse_mode="HTML"
        )
        return ConversationHandler.END
    
    temp_data["address"] = token_address
    temp_data["chat_id"] = chat_id
    current_percent = tracked_tokens[chat_id][token_address]["percent"]
    token_name = tracked_tokens[chat_id][token_address]["name"]
    
    await update.message.reply_text(
        f"‚úÖ –¢–æ–∫–µ–Ω <b>{token_name}</b> (<code>{token_address}</code>) –Ω–∞–π–¥–µ–Ω.\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: <b>{current_percent}%</b>\n"
        "–ù–∞ –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–∏—Ç—å (–æ—Ç 1 –¥–æ 1000)?",
        parse_mode="HTML"
    )
    return EDIT_PERCENT

async def edit_token_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    percent_str = update.message.text.strip()
    try:
        percent = float(percent_str)
        if not (1 <= percent <= 1000):
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç <b>1</b> –¥–æ <b>1000</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                parse_mode="HTML"
            )
            return EDIT_PERCENT
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>—á–∏—Å–ª–æ–º</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode="HTML"
        )
        return EDIT_PERCENT
    
    token_address = temp_data["address"]
    chat_id = temp_data["chat_id"]
    token_name = tracked_tokens[chat_id][token_address]["name"]
    tracked_tokens[chat_id][token_address]["percent"] = percent
    
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ <b>{token_name}</b> (<code>{token_address}</code>) –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{percent}%</b>",
        parse_mode="HTML"
    )
    temp_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ <b>–æ—Ç–º–µ–Ω–µ–Ω–æ</b>.", parse_mode="HTML")
    temp_data.clear()
    return ConversationHandler.END

async def remove_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tracked_tokens:
        tracked_tokens[chat_id] = {}
    
    args = context.args
    if len(args) != 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/remove</b> <i>–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞</i> –∏–ª–∏ <b>/remove all</b> –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤",
            parse_mode="HTML"
        )
        return
    
    token_address = args[0]
    if token_address.lower() == "all":
        if tracked_tokens[chat_id]:
            tracked_tokens[chat_id].clear()
            await update.message.reply_text(
                "‚úÖ –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã.",
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.",
                parse_mode="HTML"
            )
    elif token_address in tracked_tokens[chat_id]:
        token_name = tracked_tokens[chat_id][token_address]["name"]
        del tracked_tokens[chat_id][token_address]
        await update.message.reply_text(
            f"‚úÖ –¢–æ–∫–µ–Ω <b>{token_name}</b> (<code>{token_address}</code>) —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
            parse_mode="HTML"
        )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tracked_tokens:
        tracked_tokens[chat_id] = {}
    
    if not tracked_tokens[chat_id]:
        await update.message.reply_text(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    token_count = len(tracked_tokens[chat_id])
    total_change_24h = 0
    valid_tokens = 0
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
    tasks = [async_get_token_price(token) for token in tracked_tokens[chat_id]]
    results = await asyncio.gather(*tasks)
    
    for result in results:
        if "error" not in result and result["price_change_24h"] != "N/A":
            total_change_24h += result["price_change_24h"]
            valid_tokens += 1
    
    avg_change_24h = total_change_24h / valid_tokens if valid_tokens > 0 else 0
    emoji_avg = "üü¢" if avg_change_24h > 0 else "üî¥" if avg_change_24h < 0 else ""
    
    await update.message.reply_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"–¢–æ–∫–µ–Ω–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: <b>{token_count}</b>\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {emoji_avg} <b>{avg_change_24h:.2f}%</b>",
        parse_mode="HTML"
    )

async def list_tokens(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in tracked_tokens:
        tracked_tokens[chat_id] = {}
    
    if not tracked_tokens[chat_id]:
        await update.message.reply_text(
            "üìã –í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ <b>–ø—É—Å—Ç</b>",
            parse_mode="HTML"
        )
        return
    
    response = "üìã <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã:</b>\n\n"
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
    tasks = [async_get_token_price(token) for token in tracked_tokens[chat_id]]
    results = await asyncio.gather(*tasks)
    
    for token, data, result in zip(tracked_tokens[chat_id].keys(), tracked_tokens[chat_id].values(), results):
        if "error" in result:
            price_change_24h = "N/A"
            emoji_24h = ""
            price = "N/A"
            market_cap = "N/A"
            if ADMIN_CHAT_ID and "–¢–∞–π–º-–∞—É—Ç" in result["error"]:
                await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=f"‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞ <code>{token}</code> –≤ /list",
                    parse_mode="HTML"
                )
        else:
            price_change_24h = result["price_change_24h"]
            emoji_24h = "üü¢" if price_change_24h > 0 else "üî¥" if price_change_24h < 0 else ""
            price = result["price"]
            market_cap = result["market_cap"]
        
        dexscreener_url = f"https://dexscreener.com/solana/{token}"
        response += (f"<b>{data['name']}</b> (<code>{token}</code>)\n"
                     f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ: <b>{data['percent']}%</b>\n"
                     f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {emoji_24h} <b>{price_change_24h}%</b>\n"
                     f"–¶–µ–Ω–∞: <b>{format_number(price, is_price=True)}</b> | Market Cap: <b>{format_number(market_cap)}</b>\n"
                     f"<a href='{dexscreener_url}'><i>–ß–∞—Ä—Ç –Ω–∞ Dexscreener</i></a>\n\n")
    await update.message.reply_text(response, parse_mode="HTML", disable_web_page_preview=True)

async def check_prices(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in tracked_tokens:
        for token_address, data in list(tracked_tokens[chat_id].items()):
            result = get_token_price(token_address)
            if "error" in result:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è <b>{data['name']}</b> (<code>{token_address}</code>): <i>{result['error']}</i>",
                    parse_mode="HTML"
                )
                if ADMIN_CHAT_ID and "–¢–∞–π–º-–∞—É—Ç" in result["error"]:
                    await context.bot.send_message(
                        chat_id=ADMIN_CHAT_ID,
                        text=f"‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ <code>{token_address}</code>",
                        parse_mode="HTML"
                    )
                continue
            
            current_price = result["price"]
            current_market_cap = result["market_cap"]
            last_price = data["last_price"]
            percent_change = abs((current_price - last_price) / last_price * 100)
            
            if percent_change >= data["percent"]:
                direction = "–≤—ã—Ä–æ—Å–ª–∞" if current_price > last_price else "—É–ø–∞–ª–∞"
                emoji = "üü¢" if current_price > last_price else "üî¥"
                dexscreener_url = f"https://dexscreener.com/solana/{token_address}"
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"{emoji} –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ <b>{data['name']}</b> {direction} –Ω–∞ <b>{percent_change:.2f}%</b>!\n"
                         f"–¶–µ–Ω–∞: <b>{format_number(current_price, is_price=True)}</b>\n"
                         f"Market Cap: <b>{format_number(current_market_cap)}</b>\n\n"
                         f"<a href='{dexscreener_url}'><i>–ß–∞—Ä—Ç –Ω–∞ Dexscreener</i></a>",
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                tracked_tokens[chat_id][token_address]["last_price"] = current_price
                tracked_tokens[chat_id][token_address]["last_market_cap"] = current_market_cap

def main():
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
    commands = [
        BotCommand("start", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–æ–º–∞–Ω–¥—ã"),
        BotCommand("add", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"),
        BotCommand("remove", "–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"),
        BotCommand("remove all", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã"),
        BotCommand("edit", "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"),
        BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"),
        BotCommand("stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤"),
    ]
    
    application = Application.builder().token(bot_token).build()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
    application.bot.set_my_commands(commands)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    add_handler = ConversationHandler(
        entry_points=[CommandHandler("add", add_token_start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_token_name)],
            PERCENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_token_percent)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    edit_handler = ConversationHandler(
        entry_points=[CommandHandler("edit", edit_token_start)],
        states={
            EDIT_PERCENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_token_percent)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(add_handler)
    application.add_handler(edit_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("remove", remove_token))
    application.add_handler(CommandHandler("list", list_tokens))
    application.add_handler(CommandHandler("stats", stats))
    
    application.job_queue.run_repeating(check_prices, interval=60, first=10)
    
    application.run_polling()

if __name__ == "__main__":
    main()
